// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: invoices.sql

package db

import (
	"context"
	"database/sql"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (
  user_id, label, amount
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, status, label, amount
`

type CreateInvoiceParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	Label  string        `json:"label"`
	Amount int64         `json:"amount"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoices, error) {
	row := q.db.QueryRowContext(ctx, createInvoice, arg.UserID, arg.Label, arg.Amount)
	var i Invoices
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Label,
		&i.Amount,
	)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM invoices 
WHERE id = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, id)
	return err
}

const getInvoice = `-- name: GetInvoice :one
SELECT id, user_id, status, label, amount FROM invoices
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvoice(ctx context.Context, id int32) (Invoices, error) {
	row := q.db.QueryRowContext(ctx, getInvoice, id)
	var i Invoices
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Label,
		&i.Amount,
	)
	return i, err
}

const listInvoices = `-- name: ListInvoices :many
SELECT id, user_id, status, label, amount FROM invoices
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListInvoicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInvoices(ctx context.Context, arg ListInvoicesParams) ([]Invoices, error) {
	rows, err := q.db.QueryContext(ctx, listInvoices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoices{}
	for rows.Next() {
		var i Invoices
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.Label,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoiceStatus = `-- name: UpdateInvoiceStatus :one
UPDATE invoices 
SET status = 'paid'
WHERE id = $1
RETURNING id, user_id, status, label, amount
`

func (q *Queries) UpdateInvoiceStatus(ctx context.Context, id int32) (Invoices, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceStatus, id)
	var i Invoices
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Label,
		&i.Amount,
	)
	return i, err
}
